1.单元测试是编写测试代码，用来检测特定的、明确的、细颗粒的功能。单元测试并不一定保证程序功能是正确的，更不保证整体业务是准备的。

单元测试不仅仅用来保证当前代码的正确性，更重要的是用来保证代码修复、改进或重构之后的正确性。

一般来说，单元测试任务包括

    接口功能测试：用来保证接口功能的正确性。
    局部数据结构测试（不常用）：用来保证接口中的数据结构是正确的
        比如变量有无初始值
        变量是否溢出
    边界条件测试
        变量没有赋值（即为NULL）
        变量是数值（或字符)
            主要边界：最小值，最大值，无穷大（对于DOUBLE等）
            溢出边界（期望异常或拒绝服务）：最小值-1，最大值+1
            临近边界：最小值+1，最大值-1
        变量是字符串
            引用“字符变量”的边界
            空字符串
            对字符串长度应用“数值变量”的边界
        变量是集合
            空集合
            对集合的大小应用“数值变量”的边界
            调整次序：升序、降序
        变量有规律
            比如对于Math.sqrt，给出n^2-1，和n^2+1的边界
    所有独立执行通路测试：保证每一条代码，每个分支都经过测试
        代码覆盖率
            语句覆盖：保证每一个语句都执行到了
            判定覆盖（分支覆盖）：保证每一个分支都执行到
            条件覆盖：保证每一个条件都覆盖到true和false（即if、while中的条件语句）
            路径覆盖：保证每一个路径都覆盖到
        相关软件
            Cobertura：语句覆盖
            Emma: Eclipse插件Eclemma
    各条错误处理通路测试：保证每一个异常都经过测试

2.什么是 Mock 测试

Mock 测试就是在测试过程中，对于某些不容易构造（如 HttpServletRequest 必须在Servlet 容器中才能构造出来）或者不容易获取比较复杂的对象（如 JDBC 中的ResultSet 对象），用一个虚拟的对象（Mock 对象）来创建以便测试的测试方法。

Mock 最大的功能是帮你把单元测试的耦合分解开，如果你的代码对另一个类或者接口有依赖，它能够帮你模拟这些依赖，并帮你验证所调用的依赖的行为。

3.Mock 对象使用范畴

真实对象具有不可确定的行为，产生不可预测的效果，（如：股票行情，天气预报） 真实对象很难被创建的 真实对象的某些行为很难被触发 真实对象实际上还不存在的（和其他开发小组或者和新的硬件打交道）等等.
使用 Mock 对象测试的关键步骤

使用一个接口来描述这个对象 在产品代码中实现这个接口 在测试代码中实现这个接口 在被测试代码中只是通过接口来引用对象，所以它不知道这个引用的对象是真实对象。还是 Mock 对象。
Java Mock 测试

目前，在 Java 阵营中主要的 Mock 测试工具有 Mockito ，JMock，MockCreator，Mockrunner，EasyMock，MockMaker 等。 

4.verify()用来验证行为
assertEquals()用来验证结果
when().thenReturn() 当什么的时候返回结果
doThrow() 预设抛出异常

//验证是否被调用一次，等效于下面的times(1)  
verify(list).add(1);  
verify(list,times(1)).add(1);  
//验证是否被调用2次  
verify(list,times(2)).add(2);  
//验证是否被调用3次  
verify(list,times(3)).add(3);  
//验证是否从未被调用过  
verify(list,never()).add(4);  
//验证至少调用一次  
verify(list,atLeastOnce()).add(1);  
//验证至少调用2次  
verify(list,atLeast(2)).add(2);  
//验证至多调用3次  
verify(list,atMost(3)).add(3);  


    
    